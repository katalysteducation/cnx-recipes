#!/bin/bash

# Resolve all dependencies that the application requires to run.
# From https://github.com/github/scripts-to-rule-them-all/blob/master/script/bootstrap

set -e

cd "$(dirname "$0")/.."

if [ -f "Brewfile" ] && [ "$(uname -s)" = "Darwin" ]; then
  >&2 echo "==> Updating Homebrew…"
  brew update

  brew bundle check >/dev/null 2>&1  || {
    >&2 echo "==> Installing Homebrew dependencies…"
    brew bundle
  }
fi


if [[ ! "${CI}" = "true" && ! $(which virtualenv) ]]; then
  >&2 echo "ERROR: virtualenv (Python Virtualenv) is not installed. Please install it"
  exit 1
fi

# if [[ ! "${CI}" = "true" && ! $(which rbenv) ]]; then
#   >&2 echo "ERROR: rbenv (Ruby Virtualenv) is not installed. Please install it"
#   exit 1
# fi

if [[ ! "${CI}" = "true" && ! $(which node) ]]; then
  >&2 echo "ERROR: node (NodeJS) is not installed. Please install it by going to https://github.com/creationix/nvm"
  exit 1
fi



>&2 echo "==> Installing Node package dependencies"
>&2 echo "Using node: $(node --version)"
>&2 echo "Using npm: $(npm --version)"
npm install || exit 1

# # Note: Skip rbenv for Travis because it already has ruby
# if [ ! "${CI}" = "true" ] && [ -f ".ruby-version" ]; then
#   if [[ -n $(which rbenv) ]]; then
#
#     rbenv_version="$(rbenv version-name 2>/dev/null)"
#     if [ -z "${rbenv_version}" ]; then
#       >&2 echo "==> Installing Ruby…"
#       rbenv install --skip-existing || {
#         echo "WARNING: 'rbenv install' errored. I am assuming you know what you are doing (and have sass installed locally) so continuing"
#         exit 0
#       }
#     else
#       echo "Using rbenv ruby: ${rbenv_version}"
#     fi
#   else
#     >&2 echo "WARNING: Skipping rbenv. Using local ruby"
#   fi
#
#   # Initialize rbenv (if installed)
#   [[ -n $(which rbenv) ]] && eval "$(rbenv init -)"
#
#   which bundle >/dev/null 2>&1  || {
#     >&2 echo "==> Installing Ruby Bundler gem…"
#     gem install bundler || {
#       >&2 echo ''
#       >&2 echo ''
#       >&2 echo '--------------- Error -------------'
#       >&2 echo 'Problem installing ruby bundler.'
#       exit 1
#     }
#
#     [[ -n $(which rbenv) ]] && rbenv rehash
#
#   }
# fi
#
# if [ -f "Gemfile" ]; then
#   >&2 echo "==> Installing gem dependencies…"
#   which bundle
#   bundle check --path vendor/gems >/dev/null 2>&1  || {
#     bundle install --path vendor/gems --quiet --without production
#   }
# fi


which xmllint >/dev/null 2>&1 || {
  >&2 echo "ERROR: xmllint is not installed. Please install it first"
  exit 1
}
