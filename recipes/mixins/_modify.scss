/// Moves any matching selector to the trash
/// @arg {String} $selector - A string of the selector that needs to be trashed
/// @group modify
@mixin modify_trash($selector) {
  #{$selector} {
    move-to: trash;
  }
}

/// Changes preface title's container to `<h1>`
/// @group modify
@mixin modify_titlePreface() {
  //This only changes a container
  //will this be needed once the headers in raw are changed?
  div.preface {
    > [data-type="document-title"] {
      container: h1;
      content: content();
    }
  }
}

/// Modifies the `id` of each chapter title to `"chapTitle" counter(chapTitleNum)`
/// @group modify
@mixin modify_chapterAutoID() {
  div[data-type='chapter'] {
    > h1[data-type='document-title'] {
      counter-increment: chapTitleNum;
      attr-id: "chapTitle" counter(chapTitleNum);
    }
  }
}
//add a title to the Learning objectives when they don't have one
@mixin modify_addAbstractTitle($abstracTitle) {
  [data-type="abstract"] {
    &::before {
      container: h3;
      data-type: "title";
      content: $abstracTitle;
    }
  }
}

/// Trashes `[data-type="cnx-archive-uri"]` in `.os-eob` and `.os-eoc`
///Trashes `[data-type="cnx-archive-uri"]` in composite-chapters
/// @group modify
@mixin modify_suppressURI($hasCompositeChapter) {
  div.os-eoc,
  div.os-eob {
    [data-type="cnx-archive-uri"] {
      move-to: trash;
    }
  }
  @if $hasCompositeChapter {
    [data-type="composite-chapter"] {
      > [data-type="metadata"] > [data-type="cnx-archive-uri"] {
        move-to: trash;
      }
    }
  }
}


/// Wraps all `[data-type="document-title"]` (excluding in the metadata) in a span with the class `os-text`. This is done before numbering.
/// @group modify
@mixin modify_spanWrapTitles() {
  :not([data-type="metadata"]) > [data-type="document-title"] {
    content: '';
    &::after {
      content: content();
      container: span;
      class: "os-text";
    }
  }
}

/// Modifies all simulation links to open in a new browser window.
///
/// This is done only because TEA has asked for it.
/// This targets a class name because while some links point to
///   archive.cnx.org/specials, others point to PhET simulations at colorado.edu.
///
/// @group modify
@mixin modify_simLinkTarget() {
  a.os-interactive-link {
    attr-target: "_blank";
  }
}

/// Prepares index terms for grouping by the glossary. Modifies the `id` attribute of the term to include the `$pageIDString` and `$termCounter`
/// @arg {Text} $termCounter - The name of counter for terms
/// @arg {Text} $pageIDString - The page ID where the term is found
/// @group modify
@mixin modify_prepIndexTerms($termCounter, $pageIDString) {
  div[data-type="page"],
  div[data-type="composite-page"] {
    span[data-type="term"] {
      attr-id: "auto_" string($pageIDString) "_term" counter($termCounter);
      &:match("^[a-zA-Z]") {
        attr-group-by: first-letter(content());
      }
      &:match("^[^a-zA-Z]") {
        attr-group-by: " Symbols";
      }
    }
  }
}

/// Modifies the ' Symbols' group name in index, should it exist, as the first group-label.
/// @arg {string} $location - The string of the location where title needs to be added
/// @arg {string} $name - The string of the title for this group
/// @group modify
@mixin modify_addIndexSymbolGroup($location, $name) {
  .os-#{$location}-container > div.group-by:first-of-type > span.group-label {
    &:match("^[ ](Symbols|SYMBOLS)") {
      content: $name;
    }
  }
}
/// Adds metadata to the composite pages
/// @arg {Text} $bookMetadata - The node set that contains the metadata
/// @group modify
@mixin modify_compositeMetadata($bookMetadata, $hasCompositeChapter) {
  [data-type="composite-page"] {
    content: nodes($bookMetadata) content();
  }
}

/// Adds the title for each composite page
/// @group modify
@mixin modify_retitleCompositeMetadata($hasCompositeChapter) {
  $pageAndCompositeChapterSel: ('[data-type="composite-page"]');
  @if $hasCompositeChapter {
    $pageAndCompositeChapterSel: append($pageAndCompositeChapterSel, '[data-type="composite-chapter"]', comma);
  }

  #{$pageAndCompositeChapterSel} {
    > [data-type="document-title"] {
      string-set: doc-title-TOMETADATA content();
    }
    > [data-type="metadata"] {
      > [data-type="document-title"] {
        content: string(doc-title-TOMETADATA);
      }
    }
  }
}

/// Modifies note feature to add a note title and optionally wrap the body content
/// @arg {map} $noteContent - map containing `$selector`, `$label` and `$isBodyWrapped`
/// @group modify

/// Modify the title of any container based on data-type and/or class. This is useful for oddball elements such as exercises used as notes.
@mixin modify_anyContainerTitle ($dataType, $selector) {
  div#{$dataType}#{$selector}  {
    > div[data-type="title"] {
      &::before {
        container: span;
        class: "os-title-label";
        content: content();
        move-to: anyContainerLabel;
      }
      move-to: trash;
    }
    &::after {
      container: div;
      content: pending(anyContainerLabel);
      class: "os-title";
      move-to: anyContainer;
    }
    &:deferred {
      content: pending(anyContainer) content();
    }
  }
}

@mixin modify_GenericNote() {
  @include _genericNoteNesting(1);
}

@mixin _genericNoteNesting($maxDepth, $depth: 0) {
  @if ($depth <= $maxDepth) {
    // We start counting the depth at 0, but the header objects will begin at h3
    $headingLevel: $depth + 3;
    // This is to ensure that nested notes, that have one to three non-note wrappers
    // between them and their parent note, will not be detected as unnested notes
    // The reason this looks bad is because CSS is bad and should feel bad for not
    // supporting anything that allows us to ensure all parents match a certain selector (e.i are not notes)
    $noteDepthSelector: (':not([data-type="note"]) > :not([data-type="note"]) > :not([data-type="note"]) > ');
    @if $depth > 0 {
      $noteDepthSelector: ('');
      @for $i from 1 through $depth {
        $noteDepthSelector: append($noteDepthSelector, '[data-type="note"]', 'space');
      }
    }
    // Using :not([class]) ensures that the selected note does not have a class of any kind (thus making it a "generic" note)
    #{$noteDepthSelector} [data-type="note"]:not([class]) {
      @include _genericNoteAtLevel($depth, $headingLevel)
    }
    @include _genericNoteNesting($maxDepth, $depth + 1);
  }
}

@mixin _genericNoteAtLevel($depth, $headingLevel) {
  $minorLevel: '';
  @if $depth > 0 {
    $minorLevel: 'depth#{$depth}';
  }
  &::inside {
    class: "os-note-body";
  }
  > div[data-type="title"] {
    container: span;
    class: "os-title-label";
    data-type: "";
    move-to: genericNoteLabel#{$minorLevel};
  }
  &:deferred::before {
    container: h#{$headingLevel};
    content: pending(genericNoteLabel#{$minorLevel});
    class: "os-title";
    attr-data-type: "title";
  }
}


@mixin modify_note($noteContent) {
  $className: map-get($noteContent, className);
  $labelText: map-get($noteContent, labelText);
  $titleContent: map-get($noteContent, titleContent);
  $replaceHeader: map-get($noteContent, replaceHeader);
  $useHeader: map-get($noteContent, useHeader);

  @include validate_type($className, string);
  @include validate_typeOptional($titleContent, map);
  @include validate_typeOptional($useHeader, bool);
  @include validate_typeOptional($labelText, string);
  // Check that exactly one option is provided
  @include validate_exists($titleContent or $labelText or $useHeader);
  @include validate_exists(not($titleContent and $labelText));
  @include validate_exists(not($titleContent and $useHeader));
  @include validate_exists(not($useHeader and $labelText));

  // $maxDepth is the maximum amount of note nesting to allow support for
  @include _noteNesting(1, $className, $labelText, $replaceHeader, $useHeader);
}

@mixin _noteNesting($maxDepth, $className, $labelText, $replaceHeader, $useHeader, $depth: 0) {
  @if ($depth <= $maxDepth) {
    $headingLevel: $depth + 3;
    $noteDepthSelector: (':not([data-type="note"]) > :not([data-type="note"]) > :not([data-type="note"]) > ');
    @if $depth > 0 {
      $noteDepthSelector: ('');
      @for $i from 1 through $depth {
        $noteDepthSelector: append($noteDepthSelector, '[data-type="note"]', 'space');
      }
    }
    #{$noteDepthSelector} [data-type="note"].#{$className} {
      @include _noteAtLevel($depth, $labelText, $replaceHeader, $headingLevel, $useHeader)
    }
    @include _noteNesting($maxDepth, $className, $labelText, $replaceHeader, $useHeader, $depth + 1);
  }
}

@mixin _noteAtLevel($depth, $labelText, $replaceHeader, $headingLevel, $useHeader) {
  $minorLevel: '';
  @if $depth > 0 {
    $minorLevel: 'depth#{$depth}';
  }
  @if $replaceHeader {
    //Delete original title for note
    > div[data-type="title"] {
      move-to: trash;
    }
    //Handle subtitle
    > p:first-of-type {
      > span[data-type="title"] {
        &::deferred {
          container: h#{$headingLevel + 1};
          class: "os-subtitle";
          move-to: noteSubtitle#{$minorLevel};
        }
        &::inside {
          container: span;
          class: "os-subtitle-label";
        }
      }
    }
  } @else {
    > div[data-type="title"] {
      &::deferred {
        container: h#{$headingLevel + 1};
        class: "os-subtitle";
        move-to: noteSubtitle#{$minorLevel};
      }
      &::inside {
        container: span;
        class: "os-subtitle-label";
      }
    }
  }
  // //Wrap note body
  &::inside {
    class: "os-note-body";
    content: pending(noteSubtitle#{$minorLevel}) content();
  }
  @if $useHeader {
    > div[data-type="title"] {
      container: span;
      class: "os-title-label";
      attr-data-type: "";
      move-to: myNoteLabel;
    }
    &:deferred::before {
      container: h#{$headingLevel};
      content: pending(myNoteLabel);
      class: "os-title";
      attr-data-type: "title";
    }
  } @else {
    // Make new title for note
    &:deferred::before {
      container: span;
      class: "os-title-label";
      content: $labelText;
      move-to: bNoteLabel;
    }
    &:deferred::before {
      container: h#{$headingLevel};
      content: pending(bNoteLabel);
      class: "os-title";
      attr-data-type: "title";
    }
  }
}

/// NEEDS DOCUMENTATION
/// @group needs-docs
@mixin modify_retitleHeaders ($hasCompositeChapter) {
  [data-type="chapter"] {
    [data-type="page"] {
      :not([data-type="note"]) > :not([data-type="note"]) > [data-type="note"],
      [data-type="example"],
      [data-type="exercise"] {
        > .os-title {
          container: h3;
        }
        [data-type="solution"] {
          .solution-title {
            container: h4;
          }
        }
      }
    }
  }
 [data-type="composite-page"] {
  &.os-eoc {
    > section {
        >[data-type="document-title"] {
        container: h3;
      }
    }
    > div > div > div > section {
      >[data-type="document-title"] {
        container: h4;
      }
    }
  }
  &.os-eob {
      >.os-chapter-area {
        >[data-type="document-title"] {
          container: h2;
        }
        >section {
          >[data-type="document-title"] {
            container: h3;
          }
        }
      }
    }
  }
  @if $hasCompositeChapter {
    [data-type="composite-chapter"] {
      > section,
      > [data-type="page"] {
        [data-type="document-title"], [data-type="title"] {
          container: h2;
        }
        > section {
          [data-type="document-title"], [data-type="title"] {
            container: h3;
            data-type: title;
          }
          > section {
              [data-type="document-title"], [data-type="title"] {
                container: h4;
            }
          }
        }
      }
    }
  }
  .appendix {
    > section {
       [data-type="title"], [data-type="document-title"]  {
          container: h2;
       }
       > section {
        [data-type="title"], [data-type="document-title"] {
          container: h3;
        }
      }
    }
  }
}

/// This moves the data-label attribute off of a list and into a new element so it is visible
/// @group modify
@mixin modify_wrapLists() {
  ol,
  ul {
    &[data-label]:not([data-label=""]) {
      // &::outside {
      //   tag-name-set: div;
      //   attrs-set: data-type list-container;
      //
      //   &::before {
      //     content: attr(data-label);
      //     class-add: os-label;
      //   }
      // }
      // The previous does not work. Instead, we have to do the following (& use a bucket)
      &::after {
        container: div;
        class: "os-label";
        content: attr(data-label);
        move-to: bListLabel;
      }
      &::outside {
        data-type: "list-container";
        container: div;
        content: pending(bListLabel) content();
      }

    }
  }
}

/// This moves the data-label attribute off of an exercise and into a new element so it is visible
/// @group modify
@mixin modify_wrapExercises() {
  [data-type="exercise"] {
    &[data-label]:not([data-label=""]) {
      // &::outside {
      //   tag-name-set: div;
      //   attrs-set: data-type list-container;
      //
      //   &::before {
      //     content: attr(data-label);
      //     class-add: os-label;
      //   }
      // }
      // The previous does not work. Instead, we have to do the following (& use a bucket)
      &::after {
        container: div;
        class: "os-label";
        content: attr(data-label);
        move-to: bTitleLabel;
      }
      &::outside {
        data-type: "exercise-container";
        container: div;
        content: pending(bTitleLabel) content();
      }

    }
  }
}

/// Will add a title/header with string param to solutions in a selected location
/// @group modify
@mixin modify_addSolutionHeader($selector, $titleString) {
  @include validate_type($selector, string);
  @include validate_type($titleString, string);

  #{$selector} [data-type="solution"] {
    > [data-type="title"] {
      move-to: trash;
    }
    $solutionTitleContent: (os-text: $titleString);
    @include utils_title($solutionTitleContent, bSolutionHeader);
    &::before {
      content: pending(bSolutionHeader);
      data-type: "title";
      class: "solution-title";
      container: h4;
    }
  }
}

/// This wraps every iframe with an element that has classes on it
/// saying which alternatives are present,
/// and adds a link that opens in a new window.
/// @group modify
@mixin modify_wrapIframesWithAlternatives() {
  // just a guard to make sure we did not already convert the iframe
  :not([data-type="alternatives"]) {
    // > iframe {
    //   class-add: os-is-iframe;
    //   &::outside {
    //     tag-name-set: "div";
    //     attrs-set: data-type "alternatives";
    //     class-add: "os-has-iframe" "os-has-link";
    //
    //     &::before {
    //       tag-name-set: "a";
    //       attrs-set: href attr(src), target "_window";
    //       class-add: "os-is-link";
    //       content: "link";
    //     }
    //   }
    // }
    //
    // The previous does not work. Instead, we have to do the following (& use a bucket)
    > iframe {
      class: attr(class) "os-is-iframe";
      &::after {
        container: a;
        class: "os-is-link";
        attr-target: "_window";
        attr-href: attr(src);
        content: "Click to view content";
        move-to: bIframeLink;
      }
      &::outside {
        container: div;
        data-type: "alternatives";
        class: "os-has-iframe os-has-link";
        content: pending(bIframeLink) content();
      }

    }
  }
}


@mixin modify_addUnnumbered ($sourceSelector, $element) {
  @if $element {
    #{$sourceSelector} {
      #{$element}:not(.unnumbered) {
        class: attr(class) " unnumbered";
      }
    }
  } @else {
    #{$sourceSelector}:not(.unnumbered) {
      class: attr(class) " unnumbered";
    }
  }
}

@mixin modify_tagRemovedSolutions() {
  [data-type="chapter"] {
    counter-reset: solution_trash_half;
  }
  .os-eoc .os-hasSolution[data-type="exercise"] {
    counter-increment: solution_trash_half;
    string-set: trashStatus "";
    [data-type="solution"] {
      string-set: trashStatus counter(solution_trash_half);
    }
    &::deferred {
      attr-trash-status: string(trashStatus);
    }
  }
}

@mixin modify_trashTaggedSolutions() {
  .os-eoc .os-hasSolution[data-type="exercise"] {
    &[trash-status$="0"],
    &[trash-status$="2"],
    &[trash-status$="4"],
    &[trash-status$="6"],
    &[trash-status$="8"] {
      class: attr(class) "-trashed";
      [data-type="solution"] {
        move-to: trash;
      }
    }
  }
}

@mixin modify_tagMissingExercises() {
  [data-type="exercise"] {
    string-set: missing "";
    div.missing-exercise {
      string-set: missing " missing-exercise";
    }
    &::deferred {
      class: attr(class) string(missing);
    }
  }
}

@mixin modify_dataNumberStyle() {
  ol[data-number-style="lower-alpha"]{
    attr-type: "a";
  }
}
