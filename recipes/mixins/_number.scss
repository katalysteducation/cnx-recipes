@import "./utils";

@mixin number_numberChapters($chapterTitleContent) {
  div[data-type="chapter"] {
    @include utils_title(_($chapterTitleContent), bChapterLabel);
    //use the title mixin for this? and that way content() can be wrapped
    > [data-type="document-title"] {
      container: h1;
      content: pending(bChapterLabel) content();
    }
  }
}

@mixin number_numberAppendices($appendixTitleContent) {
  div.appendix {
    @include utils_title(_($appendixTitleContent), bAppendixLabel);
    //use the title mixin for this? and that way content() can be wrapped
    > [data-type="document-title"] {
      container: h1;
      content: pending(bAppendixLabel) content();
    }
  }
}

@mixin number_numberSections($sectionTitleContent) {
  div[data-type="chapter"] > div[data-type="page"] {
    &:not(.introduction) {
      @include utils_title(_($sectionTitleContent), bSectionLabel);
      //use the title mixin for this? and that way content() can be wrapped
      > [data-type="document-title"] {
        container: h2;
        content: pending(bSectionLabel) content();
      }
    }
    &.introduction {
      > [data-type="document-title"] {
        container: h2;
      }
    }
  }
}

/// This has to run before number_numberEOCExercises because its selector is more general
/// @group number
@mixin number_numberContentExercises($exerciseTitleContent, $solutionTitleContent, $exerciseTitleContentAp, $solutionTitleContentAp) {
  [data-type="chapter"] [data-type="page"] [data-type="exercise"]:not(.unnumbered) {
    @if $exerciseTitleContent {
      [data-type="problem"] {
        @include utils_title(_($exerciseTitleContent));
      }
    }
    @if $solutionTitleContent {
      [data-type="solution"] {
        @include utils_title(_($solutionTitleContent));
      }
    }
  }
  .appendix [data-type="exercise"]:not(.unnumbered) {
    @if $exerciseTitleContentAp {
      [data-type="problem"] {
        @include utils_title(_($exerciseTitleContentAp));
      }
    }
    @if $solutionTitleContentAp {
      [data-type="solution"] {
        @include utils_title(_($solutionTitleContentAp));
      }
    }
  }
}

//EOC composite pages must be created before this runs
@mixin number_numberEOCExercises($exerciseTitleContent, $solutionTitleContent) {
  .os-eoc [data-type="exercise"] {
    [data-type="problem"] {
      @include utils_title(_($exerciseTitleContent));
    }
    [data-type="solution"] {
      @include utils_title(_($exerciseTitleContent));
    }
  }
}

@mixin number_numberExamples($exampleTitleContent, $solutionTitleContent) {
  [data-type="example"] {
    @include utils_title(_($exampleTitleContent), bExampleLabel);
    > [data-type="title"] {
      //BAD: there should not be titling content creation outside the book level. This should get moved
      $exampleTitle: (
        os-text: content()
      );
      @include utils_title($exampleTitle, bExampleLabel);
      move-to: trash;
    }
    &::after {
      container: div;
      content: pending(bExampleLabel);
      class: "os-title";
      move-to: bExampleHeader;
    }
    &:deferred {
      content: pending(bExampleHeader) content();
    }
    [data-type="solution"] {
      @include utils_title(_($solutionTitleContent), null, div, "solution-title");
    }
  }
}

@mixin number_numberNote($type, $noteContent, $hasSolutions, $solutionTitleContent) {
  [data-type="note"].#{$type} {
    @include utils_title(_($noteContent), bNoteLabel-#{$type});
    > [data-type="title"] {
      //TODO: May want to have the option to preserve titles similarly to examples in the future.
      move-to: trash;
    }
    @if $hasSolutions {
      [data-type="solution"] {
        @include utils_title(_($solutionTitleContent))
      }
    }
    &::after {
      container: div;
      content: pending(bNoteLabel-#{$type});
      class: "os-title";
      move-to: bNoteHeader;
    }
    &:deferred {
      content: pending(bNoteHeader) content();
    }
    //TODO: Maybe want to have the option to handle solutions similarly to examples in the future
  }
}

@mixin number_setCaptions($setFigTableCaptions, $labeling, $labelingAp) {
  $captionType:         map-get($setFigTableCaptions, captionType);
  $defaultContainer:    map-get($setFigTableCaptions, defaultContainer);
  $hasCaption:          map-get($setFigTableCaptions, hasCaption);
  $hasTitle:            map-get($setFigTableCaptions, hasTitle);
  $exceptionClassNames: map-get($setFigTableCaptions, exceptionClassNames);

  // $noTitleContent: (); // For the exceptions, this is the "titleContent" that will be used

  @include validate_enum($captionType, $CAPTION__PREFIX__);
  @include validate_typeOptional($exceptionClassNames, list);
  // These selectors are of the form:
  // `table:not(.unnumbered):not(.custom1):not(.custom2)` (everything that is not an exception)
  // `table.unnumbered, table.custom1, table.custom2`     (everything that is an exception)
  $elementName: "INVALID_ELEMENT_NAME";
  @if $captionType == $CAPTION_TABLE {
    $elementName: "table";
  } @else if $captionType == $CAPTION_FIGURE {
    $elementName: "figure";
  } @else {
    @error "BUG: Invalid captionType '#{$captionType}'";
  }
  $notAnExceptionSelector: "#{elementName}";
  $exceptionsSelector: "";
  @if $exceptionClassNames {
    @each $item in $exceptionClassNames {
      @include validate_type($item, string);
      $notAnExceptionSelector: unquote("#{$notAnExceptionSelector}:not(.#{$item})");
      // Only add a comma if there is already an $exceptionsSelector
      @if $exceptionsSelector == "" {
        $exceptionsSelector: unquote("#{$elementName}.#{$item}");
      } @else {
        $exceptionsSelector: unquote("#{$exceptionsSelector}, #{$elementName}.#{$item}");
      }

    }
  }

  [data-type="chapter"] {
    :not(#{$elementName}) > #{$elementName}:not(.unnumbered) {
      @include utils_title(_($labeling), bCaption);
      @include setCaptionsHelper($captionType, $defaultContainer, $hasCaption, $hasTitle);
    }
    @include trashUnnumberedCaption($elementName, $defaultContainer);
  }
  .appendix {
    :not(#{$elementName}) > #{$elementName}:not(.unnumbered),
    > #{$elementName}:not(.unnumbered) {
      @include utils_title(_($labelingAp), bCaption);
      @include setCaptionsHelper($captionType, $defaultContainer, $hasCaption, $hasTitle);
    }
    @include trashUnnumberedCaption($elementName, $defaultContainer);
  }

 // /* The :not(#{$type}) is here because of subfigures (I think) */
  //[data-type="chapter"],
  //[data-type="chapter"] :not(#{$type}) {
//    > {
  //    #{$notAnExceptionSelector} {

        // If the figure/table has a caption/title then set a boolean
        // (essentially, implement `:has(caption)`)
        // hmm, this may not be possible in 1 pass

  //      @include utils_title($labeling, bCaption);
    //    @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
    //  }
      // A bug in easybake does not allow 2 selectors with `::outside` to match an element.
      // in hs-physics the `.key-terms` table is also marked as `.unnumbered`
      // see https://github.com/Connexions/cnx-easybake/issues/48
      //
      // TODO: Maybe these selectors can be simplified to just always call setCaptionsHelper
  //    @if $exceptionsSelector != "" {
    //    #{$exceptionsSelector} {
          // @include utils_title($noTitleContent, bCaption);
  //        @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
  //      }
  //    }
//      .unnumbered#{$notAnExceptionSelector} {
  //      @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
  //    }
  //  }
  //  @include trashUnnumberedCaption($type, $defaultContainer);
    // TODO: uncomment me but it will cause minor regressions in existing books: @include trashEmptyCaption($type, $defaultContainer);
//  }

//  .appendix,
//  .appendix :not(#{$type}) {
//    > {
//      #{$notAnExceptionSelector} {
//        @include utils_title($labelingAp, bCaption);
//        @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
//      }
      // A bug in easybake does not allow 2 selectors with `::outside` to match an element.
      // in hs-physics the `.key-terms` table is also marked as `.unnumbered`
      // see https://github.com/Connexions/cnx-easybake/issues/48
      //
      // TODO: Maybe these selectors can be simplified to just always call setCaptionsHelper
//      @if $exceptionsSelector != "" {
//        #{$exceptionsSelector} {
          // @include utils_title($noTitleContent, bCaption);
//          @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
//        }
//      }
//      .unnumbered#{$notAnExceptionSelector} {
//        @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
  //    }
  //  }
//    @include trashUnnumberedCaption($type, $defaultContainer);
    // TODO: uncomment me but it will cause minor regressions in existing books: @include trashEmptyCaption($type, $defaultContainer);
//  }
}


@mixin trashEmptyCaption ($type, $defaultContainer) {
  > #{$type} {
    #{$defaultContainer}:empty {
      move-to: trash;
    }
  }
}

/// Unnumbered captions are currently trashed (even if they contain content) because
/// of some contract that the XML teams had which stated something along the lines
/// of "If a table/figure is unnumbered then openstax will discard the caption"
@mixin trashUnnumberedCaption ($elementName, $defaultContainer) {
  > #{$elementName}.unnumbered {
    #{$defaultContainer} {
      move-to: trash;
    }
  }
}

@mixin setCaptionsHelper($captionType, $defaultContainer, $hasCaption, $hasTitle) {

  @if ($hasCaption) {
    #{$defaultContainer} {
      container: span;
      class: "os-caption";
      move-to: bCaptionContent;
    }
  }
  @if ($hasTitle) {

    // create divider span for title
    &::after {
      container: span;
      class: 'os-divider';
      content: ' ';
      move-to: bCaptionDivider;
    }

    @if ($captionType == $CAPTION_TABLE) {
      #{$defaultContainer} [data-type="title"] {
        container: span;
        class: "os-title";
        move-to: bCaptionTitle;
      }
    } @else if ($captionType == $CAPTION_FIGURE) {
      [data-type="title"] {
        container: span;
        class: "os-title";
        move-to: bCaptionTitle;
      }
    } @else {
      @error "BUG: Invalid captionType '#{$captionType}'";
    }
  }
  &::after {
    container: div;
    class: "os-caption-container";
    content: pending(bCaption) pending(bCaptionTitle) pending(bCaptionDivider) pending(bCaptionContent);
    move-to: bCaptionContainer;
  }
  &::outside {
    @if $captionType == $CAPTION_TABLE {
      class: os-table;
    } @else if $captionType == $CAPTION_FIGURE {
      class: os-figure;
    } @else {
      @error "BUG: Invalid captionType '#{$captionType}'";
    }
    container: div;
    content: content() pending(bCaptionContainer);
  }
}

@mixin number_equations ($numberedEquation, $numberAfterEq) {
  [data-type="chapter"], .appendix {
    [data-type="equation"]:not(.unnumbered) {
      @if $numberAfterEq {
        @include utils_title(_($numberedEquation), equationNum);
        &::after {
          class: os-equation-number;
          container: div;
          content: pending(equationNum)
        }
      } @else {
        @include utils_title(_($numberedEquation));
      }
    }
  }
}

@mixin number_footnotes($footnoteCounter, $footnoteLinkCounter) {
  // Footnotes option 1
  li[data-type="footnote-ref"] > a[data-type="footnote-ref-link"] {
    content: counter($footnoteCounter);
  }
  sup[data-type="footnote-number"] > a[data-type="footnote-link"] {
    content: counter($footnoteLinkCounter);
  }
  // Footnotes option 2
  li > a[data-type="footnote-ref"] {
    content: counter($footnoteCounter);
  }
  a[data-type="footnote-number"] > sup {
    content: counter($footnoteLinkCounter);
  }
}
