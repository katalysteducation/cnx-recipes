// This is the ROOT of the output CSS file that is generated.

// Declare a namespace prefix for use in `sort-by:``
@namespace xhtml "http://www.w3.org/1999/xhtml";

@namespace cmlnle "http://katalysteducation.org/cmlnle/1.0";

$_symbolsSectionTitle: "Symbols";

//Currently, none of the books have composite chapters
//TODO: add a switch when our books have composite chapters, define logic/behavior for that switch. This simply could be in the _config files for all books or set based on the presence of at least one type of composite chapter (appendix, multiple page answer key etc.).


@mixin misc_webview_styling() {
  // Adapted from https://github.com/Connexions/webview/blob/master/src/scripts/modules/media/body/content-common.less#L341
  //   // Block-ish lists
  //   ul:not([data-display='inline'])          { @include list_style(block, bulleted); }
  //   ol:not([data-display='inline'])          { @include list_style(block, enumerated); }
  //   ul[data-labeled-item]                    { @include list_style(block, labeled-item); }
  //
  //   // Inline lists (with `data-display='inline'`)
  //   ul[data-display='inline']                { @include list_style(inline, bulleted); }
  //   ol[data-display='inline']                { @include list_style(inline, enumerated); }
  //   ul[data-display='inline'][data-labeled-item] { @include list_style(inline, labeled-item); }
  //
  //   // Lists inside a paragraph
  //   [data-type='list']:not([data-list-type]):not([data-labeled-item])
  //                                                     { @include list_style-emulated(inline, bulleted); }
  //   [data-type='list'][data-list-type='bulleted']     { @include list_style-emulated(inline, bulleted); }
  //   [data-type='list'][data-list-type='enumerated']   { @include list_style-emulated(inline, enumerated); }
  //   [data-type='list'][data-list-type='labeled-item'] { @include list_style-emulated(inline, labeled-item); }
  //   div[data-type='list'][data-list-type]             { padding-left: 2.5rem; margin-bottom: 1rem; }

  [data-type='list']:not([data-list-type]),
  [data-type='list'][data-list-type='bulleted'],
  [data-type='list'][data-list-type='enumerated'] {
    // Throw an erros just to make sure these cases do not occur
    sort-by: 'invalid-namespace-just-to-throw-an-error|element-HACK';
  }

  [data-type='list'][data-list-type='labeled-item'],
  [data-type='list'][data-list-type='bulleted'] {

    &:not([data-item-sep]) > span[data-type="item"]:not(:last-child)::after {
      // content: @default-inline-list-item-sep;
      container: span;
      attr-class: "-os-inline-list-separator";
      content: "; ";
    }
    &[data-item-sep] {
      // Squirrel away the separator character (if there is one)
      string-set: listItemSep attr(data-item-sep);

      > [data-type="item"]:not(:last-child)::after {
        // content: @default-inline-list-item-sep;
        // .x-not-implemented('data-item-sep=CUSTOM');
        container: span;
        attr-class: "-os-inline-list-separator";
        content: string(listItemSep);
      }
    }
  }
}


@include localize {
:pass(0) {
  //Some modifications to be done to the book before any collation
  @include misc_webview_styling();

  @include modify_titlePreface();
  @include modify_spanWrapTitles();
  @if $Config_Coverage_MayHaveSimlinks == true {
    @include modify_simLinkTarget();
  }
  @include modify_wrapExercises(); // no dependencies
  @include modify_wrapLists(); // no dependencies
  @if $Config_Coverage_MayHaveIframes == true {
    @include modify_wrapIframesWithAlternatives(); // no dependencies
  }

  @include modify_trash("cnx-pi");

  // Only mark up solutions if they will not be discarded (optimization)
  @if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH {
  } @else if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH_HALF {
    @include utils_hasSolution($trashHalf: true);
  } @else {
    @include utils_hasSolution($trashHalf: false);
  }

  @if $Config_HACK_modifyAnyContainerTitleSelector {
    @include modify_anyContainerTitle($Config_HACK_modifyAnyContainerTitleSelector, null);
  }
  @include modify_GenericNote();

  @each $unnumberedEquation in $Config_UnnumberedEquations {
    $contextSelector: map-get($unnumberedEquation, contextSelector);
    $childSelector: map-get($unnumberedEquation, childSelector);
    @include validate_type($contextSelector, string);
    @include validate_typeOptional($childSelector, string);
    @include modify_addUnnumbered($contextSelector, $childSelector);
  }

  //the metadata has been moved to the content, remove it from the metadata
  @include modify_trash('[data-type="metadata"] > [data-type="description"]');
  @if $Config_Coverage_MayHaveMissingExercises {
    @include modify_tagMissingExercises();
    @include modify_dataNumberStyle();
  }
  @if $Config_hasAbstract == false {
    @include modify_trash('[data-type="abstract"]');
  }
  @if $Config_abstractTitle {
    @include modify_addAbstractTitle($Config_abstractTitle);
  }
}
:pass(1) {
  @if $Config_Coverage_MayHaveMissingExercises {
    @include modify_trash('[data-type="exercise"].missing-exercise');
  }

  // Any notes that need to trash the solution
  @each $note in $Config_Notes {
    $className: map-get($note, className);
    $moveSolutionTo: map-get($note, moveSolutionTo);
    @include validate_type($className, string);
    @include validate_enumOptional($moveSolutionTo, $AREA__PREFIX__);

    @if $moveSolutionTo == $AREA_TRASH {
      @include modify_trash('.#{$className} [data-type="solution"]');
      @include utils_clearTrash();
    } @else {
      // TODO Skip reconstructing a new object for modify_note
      $labelText: _(map-get($note, labelText));
      $titleContent: _(map-get($note, titleContent));
      $replaceHeader: map-get($note, replaceHeader);
      $useHeader: map-get($note, useHeader);
      @include validate_typeOptional($useHeader, bool);
      @include validate_typeOptional($labelText, string);
      @include validate_typeOptional($titleContent, map);

      // Check that there is not both a label AND a titleContent
      @if $labelText and $titleContent {
        @error "BUG: Specified both a label and a titleContent";
      }

       @else if $useHeader {
            @include modify_note((className: $className, useHeader: $useHeader));
        }
        @else if $labelText {
          @include modify_note((className: $className, labelText: $labelText, replaceHeader: $replaceHeader));
        } @else {
          @if $titleContent {
            @include modify_note((className: $className, titleContent: $titleContent, replaceHeader: $replaceHeader));
          }
        }
      }
  }
}
:pass(2) {

  //Come up with mixins for common numbering schemes as per Phil's suggestion
  @include count_countChapters(chapter);
  @include number_numberChapters($Config_PartType_Chapter_TitleContent);
  @include count_countAppendices(appendix);
  @include number_numberAppendices($Config_PartType_Appendix_TitleContent);
  @include count_countSections(section);
  @include number_numberSections($Config_PartType_Section_TitleContent);
  @include count_footnotes(footnotes);
  @include count_footnoteLinks(footnoteLinks);
  @include number_footnotes(footnotes, footnoteLinks);

  // Count examples when moveTo: $AREA_NONE (no moving)
  @include validate_enumOptional(map-get($Config_PartType_Example, moveTo), $AREA__PREFIX__);
  @if map-get($Config_PartType_Example, moveTo) == $AREA_NONE {
    $titleContent:  map-get($Config_PartType_Example, titleContent);
    $solutionTitleContent:  map-get($Config_PartType_Example, solutionTitleContent);

    @include count_countExamples(example);
    @include number_numberExamples($titleContent, $solutionTitleContent);
  }

  // Number equations if they have a titleContent
  // @include validate_enum(map-get($Config_PartType_Equation, moveTo), $AREA__PREFIX__);
  $titleContent               : map-get($Config_PartType_Equation, titleContent);
  $numberAt                   : map-get($Config_PartType_Equation, numberAt);
  $numberAfterEq              : map-get($Config_PartType_Equation, numberAfterEq);
  @if $titleContent {
    @include validate_typeOptional($numberAfterEq, bool);
    @include validate_enum($numberAt, $NUMBER__PREFIX__);
    @include count_countEquations(equation);
    @if $numberAt == $NUMBER_BEFORE_MOVE {
      @include number_equations($titleContent, $numberAfterEq);
    }
  }

  // @include count_countExamples(example);
  // @include number_numberExamples($exampleTitleContent, $exampleSolutionTitleContent);

  // Count and number any Notes that need it
  @each $note in $Config_Notes {
    $className: map-get($note, className);
    $titleContent: map-get($note, titleContent);
    $counterName: map-get($note, counterName);
    $hasSolutions: map-get($note, hasSolutions);
    $solutionTitleContent: map-get($note, solutionTitleContent);
    @include validate_type($className, string);
    @include validate_typeOptional($titleContent, map);
    @include validate_typeOptional($counterName, string);

    @if $titleContent {
      @if $counterName {
        @include count_countNote($counterName, $className);
      }
      @include number_numberNote($className, $titleContent, $hasSolutions, $solutionTitleContent);
    }
  }

  @include count_countTerms(term);
  @include reference_refPageIDStringAs(pageID);
  @include modify_prepIndexTerms(term, pageID);

  @include reference_refSectionHeaderNodeAs(sectionHeaderNode);
  @include compose_createChapterComposites($Config_ChapterCompositePages, sectionHeaderNode);

  @each $unnumberedExercise in $Config_UnnumberedExercises {
    $contextSelector: map-get($unnumberedExercise, contextSelector);
    $childSelector: map-get($unnumberedExercise, childSelector);
    @include validate_type($contextSelector, string);
    @include validate_typeOptional($childSelector, string);
    @include modify_addUnnumbered($contextSelector, $childSelector);
  }
}
:pass(3) {
  //After: createChapterComposites
  // Construct the set of CompoundComposite pages by looping through the Config_ChapterCompositePages
  // and finding all that have a `childPages:` field
  $_chapterCompoundCompositePages: ();
  @each $page in $Config_ChapterCompositePages {
    @if map-get($page, childPages) != null {
      $_chapterCompoundCompositePages: append($_chapterCompoundCompositePages, $page);
    }
  }
  @include compose_EOCcompoundCompositesPages($_chapterCompoundCompositePages);

  //create a chapter outline
  $outlineTitle: _(map-get($Config_PartType_Chapter, outlineTitle));
  $hasLearningObjectives: map_get($Config_PartType_Chapter, hasLearningObjectives);
  @include validate_typeOptional($outlineTitle, string);
  @if $outlineTitle {
    @include compose_chapterOutline($outlineTitle, $hasLearningObjectives);
  }
}
:pass(4) {

  //After: ???
  @include reference_refSectionHeaderNodeAs(sectionHeaderNode);
  @include reference_refSectionHeaderStringAs(sectionHeaderString);
  @include compose_prepBookComposites($Config_BookCompositePages, sectionHeaderNode, sectionHeaderString);

  //move the chapter outline to the introduction module
  @if map-get($Config_PartType_Chapter, outlineTitle) {
    @include compose_moveChapterOutline();
  }

  // Count exercises that were marked as moveTo: $AREA_EOC
  @include validate_enum(map-get($Config_PartType_Exercise, moveTo), $AREA__PREFIX__);
  @if map-get($Config_PartType_Exercise, moveTo) == $AREA_EOC {
    $resetAt:       map-get($Config_PartType_Exercise, resetAt);
    $numberAt:      map-get($Config_PartType_Exercise, numberAt);
    $titleContent:  map-get($Config_PartType_Exercise, titleContent);
    @include validate_enum($resetAt, $RESET__PREFIX__);
    @include validate_enum($numberAt, $NUMBER__PREFIX__);
    @include validate_exists($titleContent);

    $resetSel: null;
    @if       $resetAt == $RESET_CHAPTER        { $resetSel: '[data-type="chapter"]'; }
    @else if  $resetAt == $RESET_COMPOSITE_PAGE { $resetSel: '[data-type="composite-page"]'; }
    @else { @error 'BUG: Invalid enum'; }

    @if $numberAt == $NUMBER_BEFORE_MOVE {
      @include count_countEOCExercises(exercise, $resetSel);
      @include number_numberEOCExercises($titleContent, $titleContent);
      @if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH_HALF {
        @include modify_tagRemovedSolutions();
      }
    } @else if $numberAt == $NUMBER_AFTER_MOVE {
    } @else { @error 'BUG: Invalid enum'; }
  }
}
:pass(5) {
  //After: createChapterComposites, numberEOCExercises
  @include count_countExercises(exerciseAll);
  // Only link up problems and solutions if they will not be discarded (optimization)
  @if map-get($Config_PartType_Exercise, numberAt) == $NUMBER_BEFORE_MOVE {
    @if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH_HALF {
      @include modify_trashTaggedSolutions();
    }
  }
  @if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH {
  } @else if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH_HALF {
    @include link_linkToProblemsFromSolutionsEOC($trashHalf: true)
  } @else {
    @include link_linkToProblemsFromSolutionsEOC($trashHalf: false);
  }
}
:pass(6) {
  //Only move solutions after exercises/solutions are numbered
  @include reference_refSectionHeaderNodeAs(sectionHeaderNode);
  @each $page in $Config_ChapterCompositePages {
    $name: _(map-get($page, name));
    $moveSolutionsTo: map-get($page, moveSolutionsTo);
    @include validate_type($name, string);
    @include validate_enumOptional($moveSolutionsTo, $AREA__PREFIX__);
    @if $moveSolutionsTo == $AREA_EOC {
      @include compose_createEOCSolutions($Config_ChapterCompositePages, $page, sectionHeaderNode);
    } @else if $moveSolutionsTo == $AREA_EOB {
      @include compose_createEOBSolutions($Config_ChapterCompositePages, $Config_Notes, $page, sectionHeaderNode);
    }
  }

  // This is mostly copy/pasta from above
  @if map-get($Config_PartType_Exercise, moveTo) == $AREA_EOC {
    $resetAt:       map-get($Config_PartType_Exercise, resetAt);
    $numberAt:      map-get($Config_PartType_Exercise, numberAt);
    $titleContent:  map-get($Config_PartType_Exercise, titleContent);

    @include validate_enum($resetAt, $RESET__PREFIX__);
    @include validate_enum($numberAt, $NUMBER__PREFIX__);
    @include validate_type($titleContent, map);

    $resetSel: null;
    @if       $resetAt == $RESET_CHAPTER        { $resetSel: '[data-type="chapter"]'; }
    @else if  $resetAt == $RESET_COMPOSITE_PAGE { $resetSel: '[data-type="composite-page"]'; }
    @else { @error 'BUG: Invalid enum'; }

    @if $numberAt == $NUMBER_AFTER_MOVE {
      @include count_countEOCExercises(exercise, $resetSel);
      @include number_numberEOCExercises($titleContent, $titleContent);
    } @else if $numberAt == $NUMBER_BEFORE_MOVE {
    } @else { @error 'BUG: Invalid enum'; }
  }

  // After: Solution trashing
  @if $Config_addSolutionHeader {
    @each $header in $Config_addSolutionHeader {
      $solutionSelector                : map-get($header, selector);
      $solutionTitle                   : _(map-get($header, title));
      @include modify_addSolutionHeader($solutionSelector, $solutionTitle);
    }
  }

  // Copy/pasta from above
  // TODO: Combine bookCompositePages and chapterCompositePages in the config and then split them out in this file
  @each $page in $Config_BookCompositePages {
    $moveSolutionsTo: map-get($page, moveSolutionsTo);
    @include validate_enumOptional($moveSolutionsTo, $AREA__PREFIX__);
    @if $moveSolutionsTo == $AREA_EOB {
      @include compose_createEOBSolutions($Config_ChapterCompositePages, $Config_Notes, $page, sectionHeaderNode);
    } @else if $moveSolutionsTo == $AREA_EOC {
      @error "BUG: For now this item should have been in chapterCompositePages but it was in bookCompositePages";
    }
  }
  //After: prepBookComposites
  @include compose_createBookComposites($Config_BookCompositePages);
}
:pass(7) {
  //After: prepIndexTerms, createBookComposites
  @include modify_addIndexSymbolGroup("index", $_symbolsSectionTitle);

  //After: composite page creation
  @include count_countChapters(chapter);
  @include count_countAppendices(appendix);

  @if map-get($Config_PartType_Exercise, moveTo) == $AREA_EOC {
    $resetAt:       map-get($Config_PartType_Exercise, resetAt);
    $numberAt:      map-get($Config_PartType_Exercise, numberAt);
    $titleContent:  map-get($Config_PartType_Exercise, titleContent);

    @include validate_enum($resetAt, $RESET__PREFIX__);
    @include validate_enum($numberAt, $NUMBER__PREFIX__);
    @include validate_type($titleContent, map);

    $resetSel: null;
    @if       $resetAt == $RESET_CHAPTER        { $resetSel: '[data-type="chapter"]'; }
    @else if  $resetAt == $RESET_COMPOSITE_PAGE { $resetSel: '[data-type="composite-page"]'; }
    @else { @error 'BUG: Invalid enum'; }
    @include count_countEOCExercises(exercise, $resetSel);

    @if $numberAt == $NUMBER_AFTER_MOVE {
       @include number_numberEOCExercises($titleContent, $titleContent);
    } @else if $numberAt == $NUMBER_BEFORE_MOVE {
    } @else { @error 'BUG: Invalid enum'; }
  }

  @include count_countExamples(example);
  @include count_countEquations(equation);
  @include link_setTargetLabels($Config_TargetLabels);
  @include link_setLinkLabels();
  // Number equations if they have a titleContent
  // @include validate_enum(map-get($Config_PartType_Equation, moveTo), $AREA__PREFIX__);
  $titleContent               : map-get($Config_PartType_Equation, titleContent);
  $numberAt                   : map-get($Config_PartType_Equation, numberAt);
  $numberAfterEq              : map-get($Config_PartType_Equation, numberAfterEq);
  @if $titleContent {
    @include validate_typeOptional($numberAfterEq, bool);
    @include validate_enum($numberAt, $NUMBER__PREFIX__);
    @if $numberAt == $NUMBER_AFTER_MOVE {
      @include number_equations($titleContent, $numberAfterEq);
    }
  }
  @include reference_refBookMetadataNodeAs(bookMetadata);
  @include modify_compositeMetadata(bookMetadata, $Config_hasCompositeChapter);
  //After: createChapterComposites, createEOCSolutions, createBookComposites
  @include compose_titleEOCComposites($Config_ChapterCompositePages);
  @include compose_titleEOBComposites($Config_BookCompositePages);
  //After: createChapterComposites, createEOCSolutions, createBookComposites
  @include modify_chapterAutoID();
  @include count_countExercisesInContentButNotInExample(exerciseMaybeInContent);
  // This has to run before number_numberEOCExercises because its selector is more general than the EOC selector
  @include number_numberContentExercises($Config_ContentExercise_TitleContent, $Config_ContentSolution_TitleContent,
                                         $Config_ContentExercise_TitleContentAp, $Config_ContentSolution_TitleContentAp);

  @include count_countTables(table);
  @include count_countFigures(figure);
  @include number_setCaptions($Config_SetTableCaption, $Config_PartType_Table_CaptionContent, $Config_PartType_Table_CaptionContentAp);
  @include number_setCaptions($Config_SetFigureCaption, $Config_PartType_Figure_CaptionContent, $Config_PartType_Figure_CaptionContentAp);
  @include modify_retitleHeaders($Config_hasCompositeChapter); // Update the h2 h3 ... levels to make sense
}
:pass(8) {
  //No Answer Key, make sure that solutions that are still present in the content are discarded
  @if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH {
    @if map-get($Config_PartType_Solution, HACKRemoveAllSolutionsNotJustEoC) == true {
      @include modify_trash('[data-type="solution"]');
    } @else {
      @include modify_trash('.os-eoc [data-type="solution"]');
    }
  }
  @include modify_trash('.os-index-link-separator:last-child');
  @include modify_retitleCompositeMetadata($Config_hasCompositeChapter);
}
:pass(9) {
  //After: All metadata tasks are completed
  @include modify_suppressURI($Config_hasCompositeChapter);
  @include toc_prepTOCElements($Config_hasCompositeChapter);
}
:pass(10) {
  @include toc_putTOCElements();
}
:pass(11) {
  @include toc_navTOCUnwrap();
}
:pass(100) {
  @include utils_clearTrash();
}
}
